# ==================================
# == CONFIGURAÇÃO DO BANCO DE DADOS ==
# ==================================
# Define a URL de conexão para o banco de dados PostgreSQL que está rodando localmente.
# IMPORTANTE: Você precisa criar um banco de dados chamado 'cookingup_db' no seu PostgreSQL
# ou alterar este nome para o nome do banco que você já criou.
spring.datasource.url=jdbc:postgresql://localhost:5432/bd_cooking_up

# Define o usuário e a senha para conectar ao banco.
# 'postgres' é o usuário padrão. Altere se o seu for diferente.
spring.datasource.username=postgres
spring.datasource.password=admin

# Especifica o driver do PostgreSQL. Embora o Spring Boot seja inteligente e geralmente 
# detecte isso sozinho a partir da URL, é uma boa prática manter a linha explícita.
spring.datasource.driver-class-name=org.postgresql.Driver


# =================================
# == CONFIGURAÇÕES DO HIBERNATE/JPA ==
# =================================
# Informa ao Hibernate para usar o "dialeto" específico do PostgreSQL,
# o que otimiza os comandos SQL gerados.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Controla como o Hibernate gerencia a estrutura das tabelas (schema).
# 'update' é ideal para desenvolvimento: ele atualiza as tabelas se você mudar
# suas classes @Entity, sem apagar os dados existentes.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console de saída os comandos SQL que o Hibernate está executando.
# Extremamente útil para depurar e entender o que está acontecendo.
spring.jpa.show-sql=true

# Formata o SQL mostrado no console para que fique mais legível, com quebras de linha.
# Só funciona se 'spring.jpa.show-sql' for true.
spring.jpa.properties.hibernate.format_sql=true


# =========================================================
# == CONFIGURAÇÕES DE SEGURANÇA (JWT) - A SEREM USADAS NO FUTURO ==
# =========================================================
# As linhas abaixo são para quando você for implementar a lógica de segurança com JSON Web Tokens.
# Elas são propriedades customizadas que seu código Java precisará ler.
# Por enquanto, não são necessárias para a aplicação iniciar.
#
# security.jwt.chave-assinatura=SuaChaveSecretaSuperSeguraEmBase64
# security.jwt.expiracao=36000