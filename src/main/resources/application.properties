# ==================================
# CONFIGURACAO DO BANCO DE DADOS
# ==================================
# Define a URL de conexao para o banco de dados PostgreSQL que esta rodando localmente.
# IMPORTANTE: Voce precisa criar um banco de dados chamado 'cookingup_db' no seu PostgreSQL
# ou alterar este nome para o nome do banco que voce ja criou.
# spring.datasource.url=jdbc:postgresql://localhost:5432/bd_cooking_up

# Define o usuario e a senha para conectar ao banco.
# 'postgres' e o usuario padrao. Altere se o seu for diferente.
# spring.datasource.username=postgres
# spring.datasource.password=admin

# Especifica o driver do PostgreSQL. Embora o Spring Boot seja inteligente e geralmente
# detecte isso sozinho a partir da URL, e uma boa pratica manter a linha explicita.
# spring.datasource.driver-class-name=org.postgresql.Driver


# =================================
# CONFIGURACOES DO HIBERNATE/JPA
# =================================
# Informa ao Hibernate para usar o "dialeto" especifico do PostgreSQL,
# o que otimiza os comandos SQL gerados.
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Controla como o Hibernate gerencia a estrutura das tabelas (schema).
# 'update' e ideal para desenvolvimento: ele atualiza as tabelas se voce mudar
# suas classes @Entity, sem apagar os dados existentes.
# spring.jpa.hibernate.ddl-auto=update

# Mostra no console de saida os comandos SQL que o Hibernate esta executando.
# Extremamente util para depurar e entender o que esta acontecendo.
# spring.jpa.show-sql=true

# Formata o SQL mostrado no console para que fique mais legivel, com quebras de linha.
# So funciona se 'spring.jpa.show-sql' for true.
# spring.jpa.properties.hibernate.format_sql=true

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# =========================================================
# CONFIGURACOES DE SEGURANCA (JWT) - A SEREM USADAS NO FUTURO
# =========================================================
# As linhas abaixo sao para quando voce for implementar a logica de seguranca com JSON Web Tokens.
# Elas sao propriedades customizadas que seu codigo Java precisara ler.
# Por enquanto, nao sao necessarias para a aplicacao iniciar.
#
# security.jwt.chave-assinatura=SuaChaveSecretaSuperSeguraEmBase64
# security.jwt.expiracao=36000